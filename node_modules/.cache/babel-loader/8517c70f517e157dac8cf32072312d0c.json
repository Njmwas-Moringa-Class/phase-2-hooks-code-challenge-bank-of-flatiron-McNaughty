{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/wabuor/Development/code/phase-2/codeChallenge/phase-2-hooks-code-challenge-bank-of-flatiron-McNaughty/src/components/AccountContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport TransactionsList from \"./TransactionsList\";\nimport Search from \"./Search\";\nimport AddTransactionForm from \"./AddTransactionForm\";\n\nfunction AccountContainer({\n  allTransactions\n}) {\n  _s();\n\n  // console.log(allTransactions)\n  //Initializing state variable for the transaction form data\n  const [newTransaction, setNewTransaction] = useState({\n    date: \"\",\n    description: \"\",\n    category: \"\",\n    amount: \"\"\n  }, []);\n\n  const handleSubmit = () => {\n    // Post new transaction\n    fetch(`http://localhost:8001/transactions`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newTransaction)\n    }).then(response => {\n      if (response.ok) {\n        console.log(\"New transaction has been logged successfully\");\n      } else {\n        console.error(\"Failed transaction\");\n      }\n    }).catch(error => {\n      console.error(\"Error logging the transaction:\", error);\n    }); //Reset fields submitted\n\n    setNewTransaction({\n      date: \"\",\n      description: \"\",\n      category: \"\",\n      amount: \"\"\n    });\n  }; // method to handle the newTransaction\n\n\n  const handleTransaction = event => {\n    // we will pick the name and value properties of the event target.\n    const {\n      name,\n      value\n    } = event.target;\n    setNewTransaction({ ...newTransaction,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddTransactionForm, {\n      addTransaction: handleSubmit,\n      newTransaction: newTransaction,\n      handleTransaction: handleTransaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionsList, {\n      transaction: allTransactions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AccountContainer, \"sZVdYn4R3aEaff3gkI8CJNtomhU=\");\n\n_c = AccountContainer;\nexport default AccountContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountContainer\");","map":{"version":3,"sources":["/home/wabuor/Development/code/phase-2/codeChallenge/phase-2-hooks-code-challenge-bank-of-flatiron-McNaughty/src/components/AccountContainer.js"],"names":["React","useState","TransactionsList","Search","AddTransactionForm","AccountContainer","allTransactions","newTransaction","setNewTransaction","date","description","category","amount","handleSubmit","fetch","method","headers","body","JSON","stringify","then","response","ok","console","log","error","catch","handleTransaction","event","name","value","target"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAEA,SAASC,gBAAT,CAA0B;AAAEC,EAAAA;AAAF,CAA1B,EAA+C;AAAA;;AAC7C;AAEA;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,CAAC;AACnDQ,IAAAA,IAAI,EAAE,EAD6C;AAEnDC,IAAAA,WAAW,EAAE,EAFsC;AAGnDC,IAAAA,QAAQ,EAAE,EAHyC;AAInDC,IAAAA,MAAM,EAAE;AAJ2C,GAAD,EAKlD,EALkD,CAApD;;AAOA,QAAMC,YAAY,GAAG,MAAM;AAGzB;AACAC,IAAAA,KAAK,CAAE,oCAAF,EAAuC;AAC1CC,MAAAA,MAAM,EAAE,MADkC;AAE1CC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFiC;AAK1CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeZ,cAAf;AALoC,KAAvC,CAAL,CAOGa,IAPH,CAOSC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,EAAb,EAAiB;AACfC,QAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACD,OAFD,MAEO;AACLD,QAAAA,OAAO,CAACE,KAAR,CAAc,oBAAd;AACD;AACF,KAbH,EAcGC,KAdH,CAcUD,KAAD,IAAW;AAChBF,MAAAA,OAAO,CAACE,KAAR,CAAc,gCAAd,EAAgDA,KAAhD;AACD,KAhBH,EAJyB,CAsBzB;;AACAjB,IAAAA,iBAAiB,CAAC;AAChBC,MAAAA,IAAI,EAAE,EADU;AAEhBC,MAAAA,WAAW,EAAE,EAFG;AAGhBC,MAAAA,QAAQ,EAAE,EAHM;AAIhBC,MAAAA,MAAM,EAAE;AAJQ,KAAD,CAAjB;AAMD,GA7BD,CAX6C,CA0C7C;;;AACA,QAAMe,iBAAiB,GAAIC,KAAD,IAAW;AACnC;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,KAAK,CAACG,MAA9B;AACAvB,IAAAA,iBAAiB,CAAC,EAChB,GAAGD,cADa;AAEhB,OAACsB,IAAD,GAAQC;AAFQ,KAAD,CAAjB;AAID,GAPD;;AASA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,kBAAD;AAAoB,MAAA,cAAc,EAAEjB,YAApC;AAAkD,MAAA,cAAc,EAAEN,cAAlE;AAAkF,MAAA,iBAAiB,EAAEoB;AAArG;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,gBAAD;AAAkB,MAAA,WAAW,EAAErB;AAA/B;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA3DQD,gB;;KAAAA,gB;AA6DT,eAAeA,gBAAf","sourcesContent":["import React, { useState } from \"react\";\nimport TransactionsList from \"./TransactionsList\";\nimport Search from \"./Search\";\nimport AddTransactionForm from \"./AddTransactionForm\";\n\nfunction AccountContainer({ allTransactions }) {\n  // console.log(allTransactions)\n\n  //Initializing state variable for the transaction form data\n  const [newTransaction, setNewTransaction] = useState({\n    date: \"\",\n    description: \"\",\n    category: \"\",\n    amount: \"\",\n  },[]);\n\n  const handleSubmit = () => {\n    \n\n    // Post new transaction\n    fetch(`http://localhost:8001/transactions`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newTransaction),\n    })\n      .then((response) => {\n        if (response.ok) {\n          console.log(\"New transaction has been logged successfully\");\n        } else {\n          console.error(\"Failed transaction\");\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error logging the transaction:\", error);\n      });\n\n    //Reset fields submitted\n    setNewTransaction({\n      date: \"\",\n      description: \"\",\n      category: \"\",\n      amount: \"\",\n    });\n  };\n\n  // method to handle the newTransaction\n  const handleTransaction = (event) => {\n    // we will pick the name and value properties of the event target.\n    const { name, value } = event.target;\n    setNewTransaction({\n      ...newTransaction,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div>\n      <Search />\n      <AddTransactionForm addTransaction={handleSubmit} newTransaction={newTransaction} handleTransaction={handleTransaction}/>\n      <TransactionsList transaction={allTransactions} />\n    </div>\n  );\n}\n\nexport default AccountContainer;\n"]},"metadata":{},"sourceType":"module"}